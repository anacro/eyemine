api.issue do
  api.id @issue.id
  api.project(:id => @issue.project_id, :name => @issue.project.name) unless @issue.project.nil?
  api.tracker(:id => @issue.tracker_id, :name => @issue.tracker.name) unless @issue.tracker.nil?
  api.status(:id => @issue.status_id, :name => @issue.status.name) unless @issue.status.nil?
  api.priority(:id => @issue.priority_id, :name => @issue.priority.name) unless @issue.priority.nil?
  api.author(:id => @issue.author_id, :name => @issue.author.name) unless @issue.author.nil?
  api.assigned_to(:id => @issue.assigned_to_id, :name => @issue.assigned_to.name) unless @issue.assigned_to.nil?
  api.category(:id => @issue.category_id, :name => @issue.category.name) unless @issue.category.nil?
  api.fixed_version(:id => @issue.fixed_version_id, :name => @issue.fixed_version.name) unless @issue.fixed_version.nil?
  api.parent(:id => @issue.parent_id) unless @issue.parent.nil?
  api.subject @issue.subject  
  
  api.description @issue.description
  #render_api_issue_description(@issue, api)
  
  api.start_date @issue.start_date
  api.due_date @issue.due_date
  api.done_ratio @issue.done_ratio
  api.estimated_hours @issue.estimated_hours
  api.spent_hours(@issue.spent_hours) if User.current.allowed_to?(:view_time_entries, @project)  

  api.created_on @issue.created_on
  api.updated_on @issue.updated_on
  api.closed_on @issue.closed_on
  
  api.array :attachments do
    @issue.attachments.each do |attachment|
      render_api_attachment(attachment, api)
    end
  end if include_in_api_response?('attachments')
  
  render_api_issue_children(@issue, api) if include_in_api_response?('children')  
  
  api.array :relations do
    @relations.each do |relation|
    	issue = relation.issue_from_id == @issue.id ? relation.issue_to : relation.issue_from
		
		api.issue(:id => issue.id) do
		  	api.tracker(:id => issue.tracker_id, :name => issue.tracker.name) unless issue.tracker.nil?
		  	api.subject issue.subject
		  	api.status(:id => issue.status_id, :name => issue.status.name) unless issue.status.nil?		  	
		end
    end
  end if include_in_api_response?('relations') && @relations.present?
  
  api.array :journals do
    @journals.each do |journal|
      api.journal :id => journal.id do
        api.user(:id => journal.user_id, :name => journal.user.name) unless journal.user.nil?
        api.notes journal.notes
        api.created_on journal.created_on
        api.array :details do
          journal.details.each do |detail|
            api.detail :property => detail.property, :name => detail.prop_key, :title => journal_detail_title(detail.property, detail.prop_key) do
              api.old_value journal_detail_value(detail.property, detail.prop_key, detail.old_value)
              api.new_value journal_detail_value(detail.property, detail.prop_key, detail.value)
            end
          end
        end
      end
    end
  end if include_in_api_response?('journals') && @journals.present? 
  
  api.array :statuses do
    @allowed_statuses.each do |status|
		api.status :id => status.id, :name => status.name
    end
  end if include_in_api_response?('statuses') && @allowed_statuses.present?

  api.array :assignables do
    @assignables.each do |user|
		api.user :id => user.id, :name => user.name
    end
  end if include_in_api_response?('assignables') && @assignables.present?
  
  api.array :trackers do
    @issue.project.trackers.each do |tracker|
		api.tracker :id => tracker.id, :name => tracker.name
    end
  end if include_in_api_response?('trackers') && @issue.project.trackers.present?  
end
